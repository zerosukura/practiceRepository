"""
面向对象编程（OOP）
类与对象：TodoApp 和 TodoDB 都是类，使用类来封装功能，实例化对象来执行具体操作。
构造函数 (__init__)：通过 __init__ 方法初始化对象的状态，如数据库连接和界面组件的设置。
方法：类内部通过方法（如 add_task, delete_task）封装具体操作，提升代码的可重用性和模块化。
2. Tkinter（Python图形界面编程）
创建窗口：使用 tk.Tk() 创建应用程序的主窗口。
组件：使用 Tkinter 提供的组件（如 Label, Button, Entry, Listbox）来设计图形用户界面。
布局管理：通过 .grid() 方法管理组件的位置，调整布局。
事件绑定：通过 command 参数绑定事件，响应用户的点击或输入。
消息框：使用 messagebox 显示警告框或提示框，以通知用户错误或操作成功。
3. 数据库操作（SQLite）
SQLite数据库：使用 sqlite3 模块与 SQLite 数据库交互，执行 SQL 查询（如 SELECT, INSERT, UPDATE, DELETE）。
连接与游标：通过 sqlite3.connect() 创建数据库连接，使用游标 (cursor) 执行 SQL 语句。
事务管理：在数据库操作后，使用 conn.commit() 提交事务，确保数据更新保存。
4. 文件与数据持久化
创建表：通过 CREATE TABLE IF NOT EXISTS 语句确保数据库表在应用启动时存在，避免每次启动时都重新创建。
插入与删除数据：插入新任务 (INSERT INTO)，删除任务 (DELETE FROM)，以及通过任务 ID 来进行数据库操作。
5. 异常处理
异常捕获：使用 try 和 except 来捕获潜在的异常（例如，索引错误或无效输入）。
用户提示：当发生错误时，通过 messagebox.showwarning() 提示用户，使程序更加健壮。
6. 命令行交互与输入验证
用户输入：通过 input() 获取用户输入，执行相应操作。
输入验证：对用户输入进行验证（如检查任务内容是否为空、是否为有效的任务编号），确保输入符合要求。
7. 分层结构与模块化设计
模块化设计：将不同功能分割到不同的文件中，增强代码的可维护性。例如，数据库操作与图形界面操作分别放在不同的类和文件中。
代码复用：通过将数据库操作封装在 TodoDB 类中，避免在多个地方重复编写相同的数据库操作代码。
8. 任务管理应用的实现
待办事项管理：实现了一个简单的待办事项管理系统，用户可以添加、查看和删除任务，并通过图形界面与数据库进行交互。
任务状态管理：可以通过数据库标记任务的完成状态（未完成、已完成）。
9. 函数与方法的设计
函数的作用：设计了多个函数和方法来实现不同的功能，如 add_task, delete_task, load_tasks，提高代码的清晰度和可维护性。
"""